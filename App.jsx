import React, { useState, useEffect } from "react";
â€Žimport { Card, CardContent } from "@/components/ui/card";
â€Žimport { Button } from "@/components/ui/button";
â€Žimport { Input } from "@/components/ui/input";
â€Žimport { motion } from "framer-motion";
â€Žimport { Bell, BookOpen, Users, AlertTriangle } from "lucide-react";
â€Ž
â€Žexport default function DolLibraryApp() {
â€Ž  const [books, setBooks] = useState([
â€Ž    {
â€Ž      id: 1,
â€Ž      personnel: "DIO I AA Ajileye",
â€Ž      title: "The Art of War",
â€Ž      author: "Sun Tzu",
â€Ž      borrowedDate: "2025-09-08",
â€Ž      dueDate: "2025-09-17",
â€Ž      returnedDate: null,
â€Ž      overdue: false,
â€Ž    },
â€Ž    {
â€Ž      id: 2,
â€Ž      personnel: "Maj Tunde Balogun",
â€Ž      title: "Leadership and Self-Deception",
â€Ž      author: "Arbinger Institute",
â€Ž      borrowedDate: "2025-09-05",
â€Ž      dueDate: "2025-09-15",
â€Ž      returnedDate: null,
â€Ž      overdue: false,
â€Ž    },
â€Ž    {
â€Ž      id: 3,
â€Ž      personnel: "Capt Grace Okafor",
â€Ž      title: "The Prince",
â€Ž      author: "NiccolÃ² Machiavelli",
â€Ž      borrowedDate: "2025-09-10",
â€Ž      dueDate: "2025-09-20",
â€Ž      returnedDate: null,
â€Ž      overdue: false,
â€Ž    },
â€Ž    {
â€Ž      id: 4,
â€Ž      personnel: "Lt Ibrahim Musa",
â€Ž      title: "Good to Great",
â€Ž      author: "Jim Collins",
â€Ž      borrowedDate: "2025-09-01",
â€Ž      dueDate: "2025-09-12",
â€Ž      returnedDate: null,
â€Ž      overdue: false,
â€Ž    },
â€Ž    {
â€Ž      id: 5,
â€Ž      personnel: "Col Fatima Sani",
â€Ž      title: "Atomic Habits",
â€Ž      author: "James Clear",
â€Ž      borrowedDate: "2025-09-07",
â€Ž      dueDate: "2025-09-18",
â€Ž      returnedDate: null,
â€Ž      overdue: false,
â€Ž    },
â€Ž    {
â€Ž      id: 6,
â€Ž      personnel: "Maj Gen Chukwuemeka Obi",
â€Ž      title: "Thinking, Fast and Slow",
â€Ž      author: "Daniel Kahneman",
â€Ž      borrowedDate: "2025-09-03",
â€Ž      dueDate: "2025-09-14",
â€Ž      returnedDate: null,
â€Ž      overdue: false,
â€Ž    },
â€Ž    {
â€Ž      id: 7,
â€Ž      personnel: "Brig Gen Aisha Bello",
â€Ž      title: "Start with Why",
â€Ž      author: "Simon Sinek",
â€Ž      borrowedDate: "2025-09-09",
â€Ž      dueDate: "2025-09-19",
â€Ž      returnedDate: null,
â€Ž      overdue: false,
â€Ž    },
â€Ž  ]);
â€Ž
â€Ž  const [personnel, setPersonnel] = useState("");
â€Ž  const [title, setTitle] = useState("");
â€Ž  const [author, setAuthor] = useState("");
â€Ž  const [duration, setDuration] = useState("");
â€Ž  const [borrowedDate, setBorrowedDate] = useState("");
â€Ž
â€Ž  useEffect(() => {
â€Ž    const interval = setInterval(() => {
â€Ž      const updatedBooks = books.map((book) => {
â€Ž        const now = new Date();
â€Ž        if (!book.returnedDate && now > new Date(book.dueDate)) {
â€Ž          return { ...book, overdue: true };
â€Ž        }
â€Ž        return book;
â€Ž      });
â€Ž      setBooks(updatedBooks);
â€Ž    }, 1000 * 60);
â€Ž    return () => clearInterval(interval);
â€Ž  }, [books]);
â€Ž
â€Ž  const lendBook = () => {
â€Ž    if (!personnel || !title || !author || !duration || !borrowedDate) return;
â€Ž
â€Ž    const dueDate = new Date(borrowedDate);
â€Ž    dueDate.setDate(dueDate.getDate() + parseInt(duration));
â€Ž
â€Ž    const newBook = {
â€Ž      id: Date.now(),
â€Ž      personnel,
â€Ž      title,
â€Ž      author,
â€Ž      borrowedDate,
â€Ž      dueDate: dueDate.toISOString(),
â€Ž      returnedDate: null,
â€Ž      overdue: false,
â€Ž    };
â€Ž
â€Ž    setBooks([...books, newBook]);
â€Ž    setPersonnel("");
â€Ž    setTitle("");
â€Ž    setAuthor("");
â€Ž    setDuration("");
â€Ž    setBorrowedDate("");
â€Ž  };
â€Ž
â€Ž  const markReturned = (id) => {
â€Ž    const updated = books.map((book) =>
â€Ž      book.id === id ? { ...book, returnedDate: new Date().toISOString() } : book
â€Ž    );
â€Ž    setBooks(updated);
â€Ž  };
â€Ž
â€Ž  const getReminders = () => {
â€Ž    const now = new Date();
â€Ž    return books.filter((book) => !book.returnedDate).map((book) => {
â€Ž      const due = new Date(book.dueDate);
â€Ž      const diffDays = Math.ceil((due - now) / (1000 * 60 * 60 * 24));
â€Ž
â€Ž      if (book.overdue) {
â€Ž        return { ...book, status: "Overdue", color: "bg-red-700 animate-pulse" };
â€Ž      } else if (diffDays <= 0) {
â€Ž        return { ...book, status: "Due Today", color: "bg-orange-600 animate-pulse" };
â€Ž      } else if (diffDays <= 3) {
â€Ž        return { ...book, status: `Due in ${diffDays} days`, color: "bg-yellow-600 animate-pulse" };
â€Ž      } else {
â€Ž        return { ...book, status: `Due in ${diffDays} days`, color: "bg-green-700" };
â€Ž      }
â€Ž    });
â€Ž  };
â€Ž
â€Ž  return (
â€Ž    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-black text-white p-6">
â€Ž      <motion.h1
â€Ž        initial={{ opacity: 0, y: -50 }}
â€Ž        animate={{ opacity: 1, y: 0 }}
â€Ž        className="text-4xl font-extrabold text-center mb-8"
â€Ž      >
â€Ž        ðŸ“š Directorate of Logistics Library
â€Ž      </motion.h1>
â€Ž
â€Ž      {/* Reminder Panel */}
â€Ž      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
â€Ž        {getReminders().map((reminder) => (
â€Ž          <div
â€Ž            key={reminder.id}
â€Ž            className={`p-4 rounded-xl shadow-md text-white ${reminder.color}`}
â€Ž          >
â€Ž            <p className="font-bold flex items-center gap-2">
â€Ž              <AlertTriangle className="w-5 h-5" /> {reminder.status}
â€Ž            </p>
â€Ž            <p className="text-sm">{reminder.title} by {reminder.author}</p>
â€Ž            <p className="text-xs">Borrowed by {reminder.personnel}</p>
â€Ž          </div>
â€Ž        ))}
â€Ž      </div>
â€Ž
â€Ž      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
â€Ž        <Card className="bg-gray-800/70 backdrop-blur-md shadow-xl rounded-2xl">
â€Ž          <CardContent className="p-6 space-y-4">
â€Ž            <h2 className="text-2xl font-bold flex items-center gap-2">
â€Ž              <BookOpen className="w-6 h-6 text-blue-400" /> Lend a Book
â€Ž            </h2>
â€Ž            <Input
â€Ž              placeholder="Personnel Name"
â€Ž              value={personnel}
â€Ž              onChange={(e) => setPersonnel(e.target.value)}
â€Ž            />
â€Ž            <Input
â€Ž              placeholder="Book Title"
â€Ž              value={title}
â€Ž              onChange={(e) => setTitle(e.target.value)}
â€Ž            />
â€Ž            <Input
â€Ž              placeholder="Author"
â€Ž              value={author}
â€Ž              onChange={(e) => setAuthor(e.target.value)}
â€Ž            />
â€Ž            <Input
â€Ž              type="number"
â€Ž              placeholder="Duration (days)"
â€Ž              value={duration}
â€Ž              onChange={(e) => setDuration(e.target.value)}
â€Ž            />
â€Ž            <Input
â€Ž              type="date"
â€Ž              placeholder="Borrowed Date"
â€Ž              value={borrowedDate}
â€Ž              onChange={(e) => setBorrowedDate(e.target.value)}
â€Ž            />
â€Ž            <Button
â€Ž              onClick={lendBook}
â€Ž              className="w-full bg-blue-600 hover:bg-blue-700"
â€Ž            >
â€Ž              Lend Book
â€Ž            </Button>
â€Ž          </CardContent>
â€Ž        </Card>
â€Ž
â€Ž        <Card className="bg-gray-800/70 backdrop-blur-md shadow-xl rounded-2xl">
â€Ž          <CardContent className="p-6 space-y-4">
â€Ž            <h2 className="text-2xl font-bold flex items-center gap-2">
â€Ž              <Users className="w-6 h-6 text-green-400" /> Borrowed Books
â€Ž            </h2>
â€Ž            <div className="space-y-3 max-h-[400px] overflow-y-auto">
â€Ž              {books.length === 0 && <p className="text-gray-400">No records yet.</p>}
â€Ž              {books.map((book) => (
â€Ž                <motion.div
â€Ž                  key={book.id}
â€Ž                  initial={{ opacity: 0, x: -50 }}
â€Ž                  animate={{ opacity: 1, x: 0 }}
â€Ž                  className={`p-4 rounded-xl shadow-md border ${
â€Ž                    book.overdue
â€Ž                      ? "border-red-500 bg-red-900/30"
â€Ž                      : "border-green-500 bg-green-900/30"
â€Ž                  }`}
â€Ž                >
â€Ž                  <h3 className="text-lg font-semibold">
â€Ž                    {book.title} <span className="text-gray-400">by {book.author}</span>
â€Ž                  </h3>
â€Ž                  <p className="text-sm">Borrowed by: <span className="font-bold">{book.personnel}</span></p>
â€Ž                  <p className="text-sm flex items-center gap-2">
â€Ž                    <Bell className="w-4 h-4" /> Due: {new Date(book.dueDate).toLocaleDateString()}
â€Ž                  </p>
â€Ž                  <p className="text-sm">Borrowed Date: {new Date(book.borrowedDate).toLocaleDateString()}</p>
â€Ž                  {book.returnedDate && (
â€Ž                    <p className="text-sm text-blue-400">Returned: {new Date(book.returnedDate).toLocaleDateString()}</p>
â€Ž                  )}
â€Ž                  {!book.returnedDate && (
â€Ž                    <Button
â€Ž                      onClick={() => markReturned(book.id)}
â€Ž                      className="mt-2 bg-red-600 hover:bg-red-700"
â€Ž                    >
â€Ž                      Mark as Returned
â€Ž                    </Button>
â€Ž                  )}
â€Ž                  {book.overdue && <p className="text-red-400 font-bold">âš  Overdue!</p>}
â€Ž                </motion.div>
â€Ž              ))}
â€Ž            </div>
â€Ž          </CardContent>
â€Ž        </Card>
â€Ž      </div>
â€Ž    </div>
â€Ž  );
â€Ž}
